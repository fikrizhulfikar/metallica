export { default as F } from 'ramda/es/F';
export { default as T } from 'ramda/es/T';
export { default as __ } from 'ramda/es/__';
export { default as add } from 'ramda/es/add';
export { default as addIndex } from 'ramda/es/addIndex';
export { default as adjust } from 'ramda/es/adjust';
export { default as all } from 'ramda/es/all';
export { default as allPass } from 'ramda/es/allPass';
export { default as always } from 'ramda/es/always';
export { default as and } from 'ramda/es/and';
export { default as any } from 'ramda/es/any';
export { default as anyPass } from 'ramda/es/anyPass';
export { default as ap } from 'ramda/es/ap';
export { default as aperture } from 'ramda/es/aperture';
export { default as append } from 'ramda/es/append';
export { default as apply } from 'ramda/es/apply';
export { default as applySpec } from 'ramda/es/applySpec';
export { default as applyTo } from 'ramda/es/applyTo';
export { default as ascend } from 'ramda/es/ascend';
export { default as assoc } from 'ramda/es/assoc';
export { default as assocPath } from 'ramda/es/assocPath';
export { default as binary } from 'ramda/es/binary';
export { default as bind } from 'ramda/es/bind';
export { default as both } from 'ramda/es/both';
export { default as call } from 'ramda/es/call';
export { default as chain } from 'ramda/es/chain';
export { default as clamp } from 'ramda/es/clamp';
export { default as clone } from 'ramda/es/clone';
export { default as comparator } from 'ramda/es/comparator';
export { default as complement } from 'ramda/es/complement';
export { default as compose } from 'ramda/es/compose';
export { default as composeK } from 'ramda/es/composeK';
export { default as composeP } from 'ramda/es/composeP';
export { default as concat } from 'ramda/es/concat';
export { default as cond } from 'ramda/es/cond';
export { default as construct } from 'ramda/es/construct';
export { default as constructN } from 'ramda/es/constructN';
export { default as contains } from 'ramda/es/contains';
export { default as converge } from 'ramda/es/converge';
export { default as countBy } from 'ramda/es/countBy';
export { default as curry } from 'ramda/es/curry';
export { default as curryN } from 'ramda/es/curryN';
export { default as dec } from 'ramda/es/dec';
export { default as defaultTo } from 'ramda/es/defaultTo';
export { default as descend } from 'ramda/es/descend';
export { default as difference } from 'ramda/es/difference';
export { default as differenceWith } from 'ramda/es/differenceWith';
export { default as dissoc } from 'ramda/es/dissoc';
export { default as dissocPath } from 'ramda/es/dissocPath';
export { default as divide } from 'ramda/es/divide';
export { default as drop } from 'ramda/es/drop';
export { default as dropLast } from 'ramda/es/dropLast';
export { default as dropLastWhile } from 'ramda/es/dropLastWhile';
export { default as dropRepeats } from 'ramda/es/dropRepeats';
export { default as dropRepeatsWith } from 'ramda/es/dropRepeatsWith';
export { default as dropWhile } from 'ramda/es/dropWhile';
export { default as either } from 'ramda/es/either';
export { default as empty } from 'ramda/es/empty';
export { default as endsWith } from 'ramda/es/endsWith';
export { default as eqBy } from 'ramda/es/eqBy';
export { default as eqProps } from 'ramda/es/eqProps';
export { default as equals } from 'ramda/es/equals';
export { default as evolve } from 'ramda/es/evolve';
export { default as filter } from 'ramda/es/filter';
export { default as find } from 'ramda/es/find';
export { default as findIndex } from 'ramda/es/findIndex';
export { default as findLast } from 'ramda/es/findLast';
export { default as findLastIndex } from 'ramda/es/findLastIndex';
export { default as flatten } from 'ramda/es/flatten';
export { default as flip } from 'ramda/es/flip';
export { default as forEach } from 'ramda/es/forEach';
export { default as forEachObjIndexed } from 'ramda/es/forEachObjIndexed';
export { default as fromPairs } from 'ramda/es/fromPairs';
export { default as groupBy } from 'ramda/es/groupBy';
export { default as groupWith } from 'ramda/es/groupWith';
export { default as gt } from 'ramda/es/gt';
export { default as gte } from 'ramda/es/gte';
export { default as has } from 'ramda/es/has';
export { default as hasIn } from 'ramda/es/hasIn';
export { default as head } from 'ramda/es/head';
export { default as identical } from 'ramda/es/identical';
export { default as identity } from 'ramda/es/identity';
export { default as ifElse } from 'ramda/es/ifElse';
export { default as inc } from 'ramda/es/inc';
export { default as indexBy } from 'ramda/es/indexBy';
export { default as indexOf } from 'ramda/es/indexOf';
export { default as init } from 'ramda/es/init';
export { default as innerJoin } from 'ramda/es/innerJoin';
export { default as insert } from 'ramda/es/insert';
export { default as insertAll } from 'ramda/es/insertAll';
export { default as intersection } from 'ramda/es/intersection';
export { default as intersperse } from 'ramda/es/intersperse';
export { default as into } from 'ramda/es/into';
export { default as invert } from 'ramda/es/invert';
export { default as invertObj } from 'ramda/es/invertObj';
export { default as invoker } from 'ramda/es/invoker';
export { default as is } from 'ramda/es/is';
export { default as isEmpty } from 'ramda/es/isEmpty';
export { default as isNil } from 'ramda/es/isNil';
export { default as join } from 'ramda/es/join';
export { default as juxt } from 'ramda/es/juxt';
export { default as keys } from 'ramda/es/keys';
export { default as keysIn } from 'ramda/es/keysIn';
export { default as last } from 'ramda/es/last';
export { default as lastIndexOf } from 'ramda/es/lastIndexOf';
export { default as length } from 'ramda/es/length';
export { default as lens } from 'ramda/es/lens';
export { default as lensIndex } from 'ramda/es/lensIndex';
export { default as lensPath } from 'ramda/es/lensPath';
export { default as lensProp } from 'ramda/es/lensProp';
export { default as lift } from 'ramda/es/lift';
export { default as liftN } from 'ramda/es/liftN';
export { default as lt } from 'ramda/es/lt';
export { default as lte } from 'ramda/es/lte';
export { default as map } from 'ramda/es/map';
export { default as mapAccum } from 'ramda/es/mapAccum';
export { default as mapAccumRight } from 'ramda/es/mapAccumRight';
export { default as mapObjIndexed } from 'ramda/es/mapObjIndexed';
export { default as match } from 'ramda/es/match';
export { default as mathMod } from 'ramda/es/mathMod';
export { default as max } from 'ramda/es/max';
export { default as maxBy } from 'ramda/es/maxBy';
export { default as mean } from 'ramda/es/mean';
export { default as median } from 'ramda/es/median';
export { default as memoize } from 'ramda/es/memoize';
export { default as memoizeWith } from 'ramda/es/memoizeWith';
export { default as merge } from 'ramda/es/merge';
export { default as mergeAll } from 'ramda/es/mergeAll';
export { default as mergeDeepLeft } from 'ramda/es/mergeDeepLeft';
export { default as mergeDeepRight } from 'ramda/es/mergeDeepRight';
export { default as mergeDeepWith } from 'ramda/es/mergeDeepWith';
export { default as mergeDeepWithKey } from 'ramda/es/mergeDeepWithKey';
export { default as mergeWith } from 'ramda/es/mergeWith';
export { default as mergeWithKey } from 'ramda/es/mergeWithKey';
export { default as min } from 'ramda/es/min';
export { default as minBy } from 'ramda/es/minBy';
export { default as modulo } from 'ramda/es/modulo';
export { default as multiply } from 'ramda/es/multiply';
export { default as nAry } from 'ramda/es/nAry';
export { default as negate } from 'ramda/es/negate';
export { default as none } from 'ramda/es/none';
export { default as not } from 'ramda/es/not';
export { default as nth } from 'ramda/es/nth';
export { default as nthArg } from 'ramda/es/nthArg';
export { default as o } from 'ramda/es/o';
export { default as objOf } from 'ramda/es/objOf';
export { default as of } from 'ramda/es/of';
export { default as omit } from 'ramda/es/omit';
export { default as once } from 'ramda/es/once';
export { default as or } from 'ramda/es/or';
export { default as over } from 'ramda/es/over';
export { default as pair } from 'ramda/es/pair';
export { default as partial } from 'ramda/es/partial';
export { default as partialRight } from 'ramda/es/partialRight';
export { default as partition } from 'ramda/es/partition';
export { default as path } from 'ramda/es/path';
export { default as pathEq } from 'ramda/es/pathEq';
export { default as pathOr } from 'ramda/es/pathOr';
export { default as pathSatisfies } from 'ramda/es/pathSatisfies';
export { default as pick } from 'ramda/es/pick';
export { default as pickAll } from 'ramda/es/pickAll';
export { default as pickBy } from 'ramda/es/pickBy';
export { default as pipe } from 'ramda/es/pipe';
export { default as pipeK } from 'ramda/es/pipeK';
export { default as pipeP } from 'ramda/es/pipeP';
export { default as pluck } from 'ramda/es/pluck';
export { default as prepend } from 'ramda/es/prepend';
export { default as product } from 'ramda/es/product';
export { default as project } from 'ramda/es/project';
export { default as prop } from 'ramda/es/prop';
export { default as propEq } from 'ramda/es/propEq';
export { default as propIs } from 'ramda/es/propIs';
export { default as propOr } from 'ramda/es/propOr';
export { default as propSatisfies } from 'ramda/es/propSatisfies';
export { default as props } from 'ramda/es/props';
export { default as range } from 'ramda/es/range';
export { default as reduce } from 'ramda/es/reduce';
export { default as reduceBy } from 'ramda/es/reduceBy';
export { default as reduceRight } from 'ramda/es/reduceRight';
export { default as reduceWhile } from 'ramda/es/reduceWhile';
export { default as reduced } from 'ramda/es/reduced';
export { default as reject } from 'ramda/es/reject';
export { default as remove } from 'ramda/es/remove';
export { default as repeat } from 'ramda/es/repeat';
export { default as replace } from 'ramda/es/replace';
export { default as reverse } from 'ramda/es/reverse';
export { default as scan } from 'ramda/es/scan';
export { default as sequence } from 'ramda/es/sequence';
export { default as set } from 'ramda/es/set';
export { default as slice } from 'ramda/es/slice';
export { default as sort } from 'ramda/es/sort';
export { default as sortBy } from 'ramda/es/sortBy';
export { default as sortWith } from 'ramda/es/sortWith';
export { default as split } from 'ramda/es/split';
export { default as splitAt } from 'ramda/es/splitAt';
export { default as splitEvery } from 'ramda/es/splitEvery';
export { default as splitWhen } from 'ramda/es/splitWhen';
export { default as startsWith } from 'ramda/es/startsWith';
export { default as subtract } from 'ramda/es/subtract';
export { default as sum } from 'ramda/es/sum';
export { default as symmetricDifference } from 'ramda/es/symmetricDifference';
export { default as symmetricDifferenceWith } from 'ramda/es/symmetricDifferenceWith';
export { default as tail } from 'ramda/es/tail';
export { default as take } from 'ramda/es/take';
export { default as takeLast } from 'ramda/es/takeLast';
export { default as takeLastWhile } from 'ramda/es/takeLastWhile';
export { default as takeWhile } from 'ramda/es/takeWhile';
export { default as tap } from 'ramda/es/tap';
export { default as test } from 'ramda/es/test';
export { default as times } from 'ramda/es/times';
export { default as toLower } from 'ramda/es/toLower';
export { default as toPairs } from 'ramda/es/toPairs';
export { default as toPairsIn } from 'ramda/es/toPairsIn';
export { default as toString } from 'ramda/es/toString';
export { default as toUpper } from 'ramda/es/toUpper';
export { default as transduce } from 'ramda/es/transduce';
export { default as transpose } from 'ramda/es/transpose';
export { default as traverse } from 'ramda/es/traverse';
export { default as trim } from 'ramda/es/trim';
export { default as tryCatch } from 'ramda/es/tryCatch';
export { default as type } from 'ramda/es/type';
export { default as unapply } from 'ramda/es/unapply';
export { default as unary } from 'ramda/es/unary';
export { default as uncurryN } from 'ramda/es/uncurryN';
export { default as unfold } from 'ramda/es/unfold';
export { default as union } from 'ramda/es/union';
export { default as unionWith } from 'ramda/es/unionWith';
export { default as uniq } from 'ramda/es/uniq';
export { default as uniqBy } from 'ramda/es/uniqBy';
export { default as uniqWith } from 'ramda/es/uniqWith';
export { default as unless } from 'ramda/es/unless';
export { default as unnest } from 'ramda/es/unnest';
export { default as until } from 'ramda/es/until';
export { default as update } from 'ramda/es/update';
export { default as useWith } from 'ramda/es/useWith';
export { default as values } from 'ramda/es/values';
export { default as valuesIn } from 'ramda/es/valuesIn';
export { default as view } from 'ramda/es/view';
export { default as when } from 'ramda/es/when';
export { default as where } from 'ramda/es/where';
export { default as whereEq } from 'ramda/es/whereEq';
export { default as without } from 'ramda/es/without';
export { default as xprod } from 'ramda/es/xprod';
export { default as zip } from 'ramda/es/zip';
export { default as zipObj } from 'ramda/es/zipObj';
export { default as zipWith } from 'ramda/es/zipWith';